
alkalne_reuse_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800040  00800040  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f5  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040f  00000000  00000000  00000765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000384  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c6  00000000  00000000  00001232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_clear_bss>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	01 c0       	rjmp	.+2      	; 0x2c <.do_clear_bss_start>

0000002a <.do_clear_bss_loop>:
  2a:	1d 93       	st	X+, r17

0000002c <.do_clear_bss_start>:
  2c:	a3 34       	cpi	r26, 0x43	; 67
  2e:	b2 07       	cpc	r27, r18
  30:	e1 f7       	brne	.-8      	; 0x2a <.do_clear_bss_loop>
  32:	6e d0       	rcall	.+220    	; 0x110 <main>
  34:	97 c0       	rjmp	.+302    	; 0x164 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <check>:
uint8_t chargeState = 0;
uint8_t voltageState = 0; // 1 for under voltage, 2 for charging, 3 for over voltage / charge finished, 0 for none
uint8_t temperatureState = 0; //  0 for OK or none, 1 for under temperature, 2 for overheat

void check() {
	chargeState = 1;
  38:	41 e0       	ldi	r20, 0x01	; 1
  3a:	42 a9       	sts	0x42, r20	; 0x800042 <chargeState>
	// check voltage
	ADMUX = 0b00000000; // ADC multiplexer PB0
  3c:	1b bb       	out	0x1b, r17	; 27
	ADCSRA |= (1 << ADSC); // start conversion
  3e:	ee 9a       	sbi	0x1d, 6	; 29
	while(ADCSRA & (1 << ADSC)); // wait until complete
  40:	ee 99       	sbic	0x1d, 6	; 29
  42:	fe cf       	rjmp	.-4      	; 0x40 <__SREG__+0x1>
	if(voltageState == 0){
  44:	41 a1       	lds	r20, 0x41	; 0x800041 <voltageState>
  46:	41 13       	cpse	r20, r17
  48:	0e c0       	rjmp	.+28     	; 0x66 <__stack+0x7>
		if(ADCL < MinVoltage){
  4a:	49 b3       	in	r20, 0x19	; 25
  4c:	4a 30       	cpi	r20, 0x0A	; 10
  4e:	20 f4       	brcc	.+8      	; 0x58 <__SREG__+0x19>
			voltageState = 1; // under voltage
  50:	41 e0       	ldi	r20, 0x01	; 1
  52:	41 a9       	sts	0x41, r20	; 0x800041 <voltageState>
			chargeState = 0; // cannot be charged
  54:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  56:	26 c0       	rjmp	.+76     	; 0xa4 <__stack+0x45>
		}
		else if(ADCL > MaxVoltage){
  58:	49 b3       	in	r20, 0x19	; 25
  5a:	45 31       	cpi	r20, 0x15	; 21
  5c:	18 f1       	brcs	.+70     	; 0xa4 <__stack+0x45>
			voltageState = 3; // over voltage
  5e:	43 e0       	ldi	r20, 0x03	; 3
  60:	41 a9       	sts	0x41, r20	; 0x800041 <voltageState>
			chargeState = 0; // cannot be charged
  62:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__stack+0x45>
		}
	}
	else if(voltageState == 1){
  66:	41 30       	cpi	r20, 0x01	; 1
  68:	71 f4       	brne	.+28     	; 0x86 <__stack+0x27>
		if(ADCL < (MinVoltage + voltageHysteresis)){
  6a:	49 b3       	in	r20, 0x19	; 25
  6c:	4c 30       	cpi	r20, 0x0C	; 12
  6e:	10 f4       	brcc	.+4      	; 0x74 <__stack+0x15>
			chargeState = 0;
  70:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  72:	18 c0       	rjmp	.+48     	; 0xa4 <__stack+0x45>
		}
		else{
			if(ADCL <= MaxVoltage){
  74:	49 b3       	in	r20, 0x19	; 25
  76:	45 31       	cpi	r20, 0x15	; 21
  78:	10 f4       	brcc	.+4      	; 0x7e <__stack+0x1f>
				voltageState = 0;
  7a:	11 a9       	sts	0x41, r17	; 0x800041 <voltageState>
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__stack+0x45>
			}
			else{
				voltageState = 2;
  7e:	42 e0       	ldi	r20, 0x02	; 2
  80:	41 a9       	sts	0x41, r20	; 0x800041 <voltageState>
				chargeState = 0;
  82:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__stack+0x45>
			}
		}
	}
	else if(voltageState == 2){
  86:	42 30       	cpi	r20, 0x02	; 2
  88:	69 f4       	brne	.+26     	; 0xa4 <__stack+0x45>
		if(ADCL > (MaxVoltage - voltageHysteresis)){
  8a:	49 b3       	in	r20, 0x19	; 25
  8c:	43 31       	cpi	r20, 0x13	; 19
  8e:	10 f0       	brcs	.+4      	; 0x94 <__stack+0x35>
			chargeState = 0; // cannot be charged
  90:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  92:	08 c0       	rjmp	.+16     	; 0xa4 <__stack+0x45>
		}
		else{
			if(ADCL >= MinVoltage){
  94:	49 b3       	in	r20, 0x19	; 25
  96:	4a 30       	cpi	r20, 0x0A	; 10
  98:	10 f0       	brcs	.+4      	; 0x9e <__stack+0x3f>
				voltageState = 0;
  9a:	11 a9       	sts	0x41, r17	; 0x800041 <voltageState>
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <__stack+0x45>
			}
			else{
				voltageState = 1;
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	41 a9       	sts	0x41, r20	; 0x800041 <voltageState>
				chargeState = 0;
  a2:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
			}
		}
	}

	// check temperature
	ADMUX = 0b00000001; // ADC multiplexer PB1
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	4b bb       	out	0x1b, r20	; 27
	ADCSRA |= (1 << ADSC); // start conversion
  a8:	ee 9a       	sbi	0x1d, 6	; 29
	while(ADCSRA & (1 << ADSC)); // wait until complete
  aa:	ee 99       	sbic	0x1d, 6	; 29
  ac:	fe cf       	rjmp	.-4      	; 0xaa <__stack+0x4b>
	if(temperatureState == 0){
  ae:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
  b0:	41 13       	cpse	r20, r17
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__stack+0x71>
		if(ADCL < MinTemperature){
  b4:	49 b3       	in	r20, 0x19	; 25
  b6:	4a 30       	cpi	r20, 0x0A	; 10
  b8:	20 f4       	brcc	.+8      	; 0xc2 <__stack+0x63>
			temperatureState = 1; // under voltage
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
			chargeState = 0; // cannot be charged
  be:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  c0:	08 95       	ret
		}
		else if(ADCL > MaxTemperature){
  c2:	49 b3       	in	r20, 0x19	; 25
  c4:	45 31       	cpi	r20, 0x15	; 21
  c6:	18 f1       	brcs	.+70     	; 0x10e <__DATA_REGION_LENGTH__+0xe>
			temperatureState = 3; // over voltage
  c8:	43 e0       	ldi	r20, 0x03	; 3
  ca:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
			chargeState = 0; // cannot be charged
  cc:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  ce:	08 95       	ret
		}
	}
	else if(temperatureState == 1){
  d0:	41 30       	cpi	r20, 0x01	; 1
  d2:	71 f4       	brne	.+28     	; 0xf0 <__stack+0x91>
		if(ADCL < (MinTemperature + temperatureHysteresis)){
  d4:	49 b3       	in	r20, 0x19	; 25
  d6:	4c 30       	cpi	r20, 0x0C	; 12
  d8:	10 f4       	brcc	.+4      	; 0xde <__stack+0x7f>
			chargeState = 0;
  da:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  dc:	08 95       	ret
		}
		else{
			if(ADCL <= MaxTemperature){
  de:	49 b3       	in	r20, 0x19	; 25
  e0:	45 31       	cpi	r20, 0x15	; 21
  e2:	10 f4       	brcc	.+4      	; 0xe8 <__stack+0x89>
				temperatureState = 0;
  e4:	10 a9       	sts	0x40, r17	; 0x800040 <__DATA_REGION_ORIGIN__>
  e6:	08 95       	ret
			}
			else{
				temperatureState = 2;
  e8:	42 e0       	ldi	r20, 0x02	; 2
  ea:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
				chargeState = 0;
  ec:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  ee:	08 95       	ret
			}
		}
	}
	else if(temperatureState == 2){
  f0:	42 30       	cpi	r20, 0x02	; 2
  f2:	69 f4       	brne	.+26     	; 0x10e <__DATA_REGION_LENGTH__+0xe>
		if(ADCL > (MaxTemperature - temperatureHysteresis)){
  f4:	49 b3       	in	r20, 0x19	; 25
  f6:	43 31       	cpi	r20, 0x13	; 19
  f8:	10 f0       	brcs	.+4      	; 0xfe <__stack+0x9f>
			chargeState = 0; // cannot be charged
  fa:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
  fc:	08 95       	ret
		}
		else{
			if(ADCL >= MinTemperature){
  fe:	49 b3       	in	r20, 0x19	; 25
 100:	4a 30       	cpi	r20, 0x0A	; 10
 102:	10 f0       	brcs	.+4      	; 0x108 <__DATA_REGION_LENGTH__+0x8>
				temperatureState = 0;
 104:	10 a9       	sts	0x40, r17	; 0x800040 <__DATA_REGION_ORIGIN__>
 106:	08 95       	ret
			}
			else{
				temperatureState = 1;
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
				chargeState = 0;
 10c:	12 a9       	sts	0x42, r17	; 0x800042 <chargeState>
 10e:	08 95       	ret

00000110 <main>:
	}
}

int main(void)
{
	DDRB = 0b00000100; // set inputs and outputs
 110:	44 e0       	ldi	r20, 0x04	; 4
 112:	41 b9       	out	0x01, r20	; 1
  PORTB = 0b0000000; // outputs set to LOW and input set to h-Z
 114:	12 b9       	out	0x02, r17	; 2
	DIDR0 = 0b00000011; // disable digital input for ADC inputs
 116:	43 e0       	ldi	r20, 0x03	; 3
 118:	47 bb       	out	0x17, r20	; 23
    while (1)
    {
		check();
 11a:	8e df       	rcall	.-228    	; 0x38 <check>
		if(chargeState == 1){
 11c:	42 a1       	lds	r20, 0x42	; 0x800042 <chargeState>
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	b9 f4       	brne	.+46     	; 0x150 <main+0x40>
 122:	40 ea       	ldi	r20, 0xA0	; 160
 124:	50 e0       	ldi	r21, 0x00	; 0
			for(int i = 0; i < 160; i++){
				 PORTB = 0b0000100;
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	62 b9       	out	0x02, r22	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e2       	ldi	r24, 0x2F	; 47
 12c:	95 e7       	ldi	r25, 0x75	; 117
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e9 f7       	brne	.-6      	; 0x12e <main+0x1e>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x26>
 136:	00 00       	nop
				 _delay_ms(120);
				 PORTB = 0b0000000;
 138:	12 b9       	out	0x02, r17	; 2
 13a:	81 ee       	ldi	r24, 0xE1	; 225
 13c:	94 e0       	ldi	r25, 0x04	; 4
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e9 f7       	brne	.-6      	; 0x13e <main+0x2e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x36>
 146:	00 00       	nop
 148:	41 50       	subi	r20, 0x01	; 1
 14a:	51 0b       	sbc	r21, r17
	DIDR0 = 0b00000011; // disable digital input for ADC inputs
    while (1)
    {
		check();
		if(chargeState == 1){
			for(int i = 0; i < 160; i++){
 14c:	69 f7       	brne	.-38     	; 0x128 <main+0x18>
 14e:	e5 cf       	rjmp	.-54     	; 0x11a <main+0xa>
 150:	9f e7       	ldi	r25, 0x7F	; 127
 152:	44 e8       	ldi	r20, 0x84	; 132
 154:	5e e1       	ldi	r21, 0x1E	; 30
 156:	91 50       	subi	r25, 0x01	; 1
 158:	40 40       	sbci	r20, 0x00	; 0
 15a:	50 40       	sbci	r21, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x46>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x50>
 160:	00 00       	nop
 162:	db cf       	rjmp	.-74     	; 0x11a <main+0xa>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
